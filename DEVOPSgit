DevOPs
https://itea.ua/courses-itea/devops-courses/devops-base-level/

Начнем с


Тема: Git

Почему VCS и почему Git
 Version Control System

Принципы хранения данных
Хранение производится пластами, если файлы не изменяются, на них создается
ссылка

Установка
yum install git
apt-get install git

Конфигурация
git config --system - эквивалентно /etc/gitconfig - у меня даже нет такого
файла, общее для всех пользователей репозиториев

git config --global - эквивалентно ~/.gitconfig - хранит настройки конкретного
пользователя, у меня там хранится user {email, name}

.git/config  - настройки для конкретного репозитория, перекрывают настройки в
файле /etc/gitconfig

$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
$ git config --global core.editor vim
$ git config --global merge.tool vimdiff
$ git config --list - проверка настроек


Происхождение
Ли́нус Бенедикт То́рвальдс, или Ту́рвальдс
(швед. Linus Benedict Torvalds [ˈliːn.ɵs ˈtuːr.valds] ℹ︎слушать ; 28 декабря
1969, Хельсинки, Финляндия) — финно-американский программист, хакер.

Джунио Хамано (англ. Junio Hamano) — программист, с 28 июля 2005 года является
координатором проекта Git, распределенной системы управления версиями. Также
принимал активное участие в разработке ядра Linux ветки 2.6 и утилиты GNU Tar.

Филиалы
Речь идет  скорее всего о ветках.
Суть в том что можно перейти на любую ветку с помощью
git checkout $commit
и дальше делать в ней коммиты, но если вы захотите перейти на какую либо другую
ветку либо коммит, все текущие коммиты ищезнут, и тобы такого не случилось,
необходимо создать ветку на текущем коммите, напимер
git checkout -b $branchname




Филиалы - branches
flaw
Поток Git
https://danielkummer.github.io/git-flow-cheatsheet/index.ru_RU.html

Рабочие процессы на основе транзакций
Централизованный рабочий процесс - по факту если хочешь внести изменения в
главный репозиторий, ты должен изначально его спулить, после чего обьёдинить с
твоей веткой ( всегда создаем ветку, если работаем над чем-то, а не тупо
херачим в основной реп)

Рабочий процесс с менеджером по интеграции
1. Владелец проекта выкладывает файлы в публичный репозиторий.
2. Участники проекта клонируют этот репозиторий и делают изменения.
3. Участники выкладывают изменения в свои собственные публичные репозитории.
4. Участник проекта отправляет владельцу письмо с просьбой включения его изменений.
5. Владелец проекта добавляет репозиторий участника как удалённый и локально выполняет слияние.
6. Владелец отправляет слитые изменения в основной репозиторий.

Рабочий процесс с диктатором и его помощниками

1. Обычные разработчики работают над своими тематическими ветками и перемещают
свою работу на вершину ветки master. Ветка master — это та ветка, которая
находится у диктатора.
2. Помощники сливают тематические ветки разработчиков в свои ветки master.
3. Диктатор выполняет слияние веток master своих помощников со своей веткой
master.
4. Диктатор отправляет свою ветку master в эталонный репозиторий, чтобы
остальные разработчики могли выполнять перемещение на неё.

Запросы на выбор

речь идет о pull request'aх в другие публичные проэкты
git clone git@github.com:username/Spoon-Knife.git
cd Spoon-Knife
git remote add upstream git://github.com/octocat/Spoon-Knife.git
git fetch upstream
git checkout -b feature
Творим добро и загружаем ветку в свой удаленный репозиторий
git push origin feature
И потом уже через github делаем pull request указывая основной репозиторий,
какие коммиты нужно запулить ( сам не делал, но протестю у кого-то)
После того, как всё сделано
git checkout master
git pull upstream master
git push origin master

Также можно удалить ветку
git branch -d feature #В локальном репозитории
git push origin :feature #В удалённом репозитории





Конфликты
git checkout master
git merge some_branch

Если возникает конфликт, в данном случае, нам необходимо его разрешить и
сделать коммит например "Merged conflict has been fixed"
Чтобы отменить merge используем команду
git merge --abort

git branch --merged master lists branches merged into master

git branch --merged lists branches merged into HEAD (i.e. tip of current branch)

git branch --no-merged lists branches that have not been merged

rebase по факту применят все коммиты ветки в ту ветку которую ты указываешь,
после выполнения данной команды все коммиты будут удалены.

git checkout feature
git rebase master

можно указать параметр --onto чтобы ограничить глубину веток для rebase

git rebase --onto e1235 master , rebase будет применяется с ветки, что идет
после e12345

Крючки
Золотые слова  "Для того чтобы познакомиться с механизмом хуков в git,
достаточно просто начать их использовать и посмотреть как оно работает,
и как оно устроено внутри."


https://habrahabr.ru/post/75063/
https://git-scm.com/book/ru/v1/%D0%9D%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-Git-%D0%9F%D0%B5%D1%80%D0%B5%D1%85%D0%B2%D0%B0%D1%82%D1%87%D0%B8%D0%BA%D0%B8-%D0%B2-Git

Клиенты GUI (kraken)
giggle
GitEye
Cycligent Git Tool
git-cola
gitg

Вот такая вот дичь творится здеся
